#!/usr/local/bin/perl

## Jamie Bush, 2004
## RxWeb (AlephRx) version 3.1
## name changed 6/20/06 

=head1 NAME

ALEPHemail.cgi - Emailer and Report Confirmation Page

=head1 DESCRIPTION

This form receives the emailing options generated by ALEPHform.cgi and sends the
email to the mailer program (set in the environment variable C<ALEPHRX_MAILER>)
and then displays the full record.

This file and F<ALEPHform.cgi> must be in the same directory

=cut

############################################################################
## update 20080109 - JB, added "dlcooper@umd.edu" as bcc, see sub bcc_create
##    2009/09/23 - Hans - removed dlcooper
##    2010/09/07 - Hans - Changed aleph@itd.umd.edu to usmaialeph@umd.edu
##    2011/04/21 - Hans - Changed typo "Your have submitted ..."
############################################################################

use CGI;
use DBI;
use CGI::Carp qw(fatalsToBrowser);
use URI;

# get db connection info from the environment
# use SetEnv in the Apache config for the cgi-bin directory to set these
$database  = $ENV{ALEPHRX_DATABASE_NAME};
$db_server = $ENV{ALEPHRX_DATABASE_HOST};
$user      = $ENV{ALEPHRX_DATABASE_USER};
$password  = $ENV{ALEPHRX_DATABASE_PASS};

$statement = "";
$id = "";
$rname = "";
$response = "";
$from = "usmaialeph\@umd.edu (RxWeb)";
$mailprog = $ENV{ALEPHRX_MAILER};
$query = new CGI;
$email_check = 0;

$input_size = $ENV { 'CONTENT_LENGTH' };
read ( STDIN, $form_info, $input_size );
@input_pairs = split (/[&;]/, $form_info);

%input = ();

foreach $pair (@input_pairs) {
    #Convert plusses to spaces
    $pair =~ s/\+/ /g;

    #Split the name and value pair
    ($name, $value) = split (/=/, $pair);

    #Decode the URL encoded name and value
    $name =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;
    $value =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;

    #Copy the name and value into the hash
    $input{$name} = $value;
}

$name = $query->param('name');
$id = $query->param('id');
$campus = $query->param('campus');
$status = $query->param('status');
$text = $query->param('text');
$summary = $query->param('summary');
$date = $query->param('date');
$grp = $query->param('grp');
$time = $query->param('time');
$hour = $query->param('ampm');
$phone = $query->param('phone');
$email = $query->param('email');
$email1 = $query->param('email1');
$email2 = $query->param('email2');
$email3 = $query->param('email3');
$email3a = $query->param('email3a');
$email4 = $query->param('email4');
$email4a = $query->param('email4a');
$email5 = $query->param('email5');
$cataloger = $query->param('cataloger');
$email_config = $query->param('email_config');

#to be used in email before single quotes are escaped
$summary_mail = $summary;
$name_mail = $name;
$text_mail = $text;

if ($email3) { &Check_Email($email3a);}
if ($email4) { &Check_Email($email4a);}

if ($email_config = "yes") {
    &Check_Email;
    if ($email_check gt 1) {
        &bad_email_display;
    } else {
        &recipient;
        &slug;
        &email_options;
        &display_record;
        if ($email_count > 0) {
            &mail;
        }
    }
}

=head2 display_record()

Displays the full report record after email configuration is confirmed and the
email is sent.

=cut
sub display_record {
    print "Content-type: text/html\n\n";
    print "<HTML>\n<HEAD>\n<TITLE>RxWeb  Reports Summaries</TITLE>\n</HEAD>\n<BODY BGCOLOR=\"#98AFC7\">\n";
    print "<FORM ACTION=\"\/cgi-bin\/ALEPH16\/ALEPHsum.cgi\" METHOD=\"post\">\n";
    print "<center>\n";
    print "<H1>ALEPH Reports</H1>\n";
    print "<FONT SIZE=+1 COLOR=\"#FF0000\">You have submitted report number #$id</FONT>\n";
    print "<P><INPUT TYPE=\"button\" VALUE=\"RxWeb Form\" onClick=\"parent.location ='\/cgi-bin\/ALEPHform.cgi'\">\n";
    print "<INPUT TYPE=\"button\" VALUE=\"RxWeb\" onClick=\"parent.location='\/cgi-bin\/ALEPH16\/ALEPHsum.cgi?id'\"></p>\n";
    print "<TABLE BORDER=0 CELLPADDING=2>\n";

    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password);

    $statement =   "SELECT people.id, report.summary, people.name, people.phone, DATE_FORMAT(report.date,'%m/%d/%y'), people.grp, people.campus, report.status, report.text FROM people, report WHERE people.id = '$id' and people.id = report.id";

    $sth = $dbh->prepare($statement)
        or die "Couldn't prepare the query: $sth->errstr";
    $rv = $sth->execute
        or die "Couldn't execute the query: $dbh->errstr";

    while (@row = $sth->fetchrow_array) {
        print "<TR><TD BGCOLOR=\"#FFFF00\" COLSPAN=7><B><i>Report #</i>&nbsp;$row[0]&nbsp;&nbsp;&nbsp;&nbsp;$row[1]</B></TD></FONT></TR>\n";
        print "<TR>\n
        <TH BGCOLOR=\"#CCCCCC\"><FONT SIZE=-1><I>Name</I></TH>\n
        <TH BGCOLOR=\"#CCCCCC\"><FONT SIZE=-1><I>Phone</I></TH>\n
        <TH BGCOLOR=\"#CCCCCC\"><FONT SIZE=-1><I>Date</I></TH>\n
        <TH BGCOLOR=\"#CCCCCC\"><FONT SIZE=-1><I>Group</I></TH>\n
        <TH BGCOLOR=\"#CCCCCC\"><FONT SIZE=-1><I>Campus</I></TH>\n
        <TH BGCOLOR=\"#CCCCCC\"><FONT SIZE=-1><I>Status</I></TH>\n
        <TH BGCOLOR=\"#CCCCCC\"><FONT SIZE=-1><I>Text</I></TH>\n";

        print "<TR>\n";
        print "<TD BGCOLOR=\"#E8E8E8\" VALIGN=TOP>$row[2]</TD>\n";
        print "<TD BGCOLOR=\"#E8E8E8\" VALIGN=TOP>$row[3]</TD>\n";
        print "<TD BGCOLOR=\"#E8E8E8\" VALIGN=TOP>$row[4]</TD>\n";
        print "<TD BGCOLOR=\"#E8E8E8\" VALIGN=TOP>$row[5]</TD>\n";
        print "<TD BGCOLOR=\"#E8E8E8\" VALIGN=TOP>$row[6]</TD>\n";
        print "<TD BGCOLOR=\"#E8E8E8\" VALIGN=TOP>$row[7]</TD>\n";
        print "<TD BGCOLOR=\"#E8E8E8\" VALIGN=TOP>$row[8]</TD>\n";
        print "<TD VALIGN=TOP>$row[9]<FONT SIZE=-2><a href=\"\/cgi-bin\/ALEPH16\/ALEPHreply.cgi?$row[0]\">Reply</a></FONT></TD>\n";
        $row_id = $row[0];
        $date = $row[4];
        $stext = $row[8];
        $ssummary = $row[1];
        print "</TR>\n";
        print "</TR>\n";
        print "<TR><TD><FONT SIZE=-2>&nbsp;</TD></TR>\n";
    }
    print "</TABLE>\n";
    $rc = $sth->finish;
    $rc = $dbh->disconnect;
    print "</FORM>\n";
    print "</BODY>\n</HTML>\n";
}

=head2 mail()

Formats and submits the confirmation email to the mailer prog. This function
retireves the path to the mailer form the C<$mailprog> variable, but it is
ultimately set via the C<ALEPHRX_MAILER> environment variable.

Calls C<bcc_create()> to create a Bcc header (stored in C<$bcc>), if needed.

=cut
sub mail {

    &bcc_create;

    # construct the URLs relative to the request, so the hostname and the path
    # to the script gets adjusted for whatever server this is running on
    my $reply_url = URI->new_abs('ALEPH16/ALEPHreply.cgi', $query->url);
    $reply_url->query($id);
    my $details_url = URI->new_abs('ALEPH16/ALEPHsum_full.cgi', $query->url);
    $details_url->query($id);

    open (MAIL,"|$mailprog -t");
    print MAIL "To: $final_email_list\n";
    print MAIL "Bcc: $bcc\n" if $bcc;
    print MAIL <<END;
From: $from
Subject: NEW:$slug#$id:$ssummary

--------------------------------------------------------------------------------
Please do not reply directly to this e-mail. 
To REPLY to this Rx: $reply_url
(If prompted, sign in with the standard USMAI username/password.)
--------------------------------------------------------------------------------

Report Submitted by: $name_mail
           Report# : $id
    Date of problem: $date
   Functional Group: $grp
             Campus: $campus
             Status: $status

     Problem Report: $stext 

===================================================================================
View this Rx online: $details_url
END
    close (MAIL);
}

=head2 bcc_create()

Ensure that usmaialeph@umd.edu will always receive the notification email. If
they are not in the C<$final_email_list> (as constructed by L<email_options()>),
then this function sets C<$bcc> to usmaialeph@umd.edu. Otherwise, C<$bcc> is set
to the empty string.

=cut
sub bcc_create {
    if ($final_email_list =~ /usmaialeph\@umd.edu/i) {
        $bcc = '';
    }else{
        $bcc = "usmaialeph\@umd.edu";
    }
}

=head2 email_options()

Assembles the the final list of email addresses and places it into the
C<$final_email_list> variable.

If C<$email1> is set, include the C<$recipient> set by L<recipient()>.

If C<$email2> is set, include the C<$email>, which comes from the C<email>
request parameter.

If C<$email3> is set, include the value of C<$email3a>, which comes from a
request parameter.

If C<$email4> is set, include the value of C<$email4a>, which comes from a
request parameter.

If C<$email5> is set, include it in the list.

If no emails are selected, the default C<$final_email_list> value is
"jamieb@kitabu.umd.edu".

=cut
sub email_options {
    if ($email1) {
        $recipient =~ s/\s+//g;
        $rec1 = "$recipient";
        $email_count++;
    }

    if ($email2) {
        $email =~ s/\s+//g;
        $rec2 = ",$email";
        $email_count++;
    }

    if ($email3) {
        $email3a =~ s/\s+//g;
        $rec3 = ",$email3a";
        $email_count++;
    }

    if ($email4) {
        $email4a =~ s/\s+//g;
        $rec4 = ",$email4a";
        $email_count++;
    }

    if ($email5) {
        $rec5 = ",$email5";
        $email_count++;
    }

    $final_email_list = $rec1 . $rec2 . $rec3 . $rec4 . $rec5;

    if ($email_count < 1) {
        $final_email_list = "jamieb\@kitabu.umd.edu";
    }
}

=head2 Check_Email()

Checks if its first argument is a valid email address. If it is not, it
increments the C<$email_check> counter, and pushes the bad string onto the
C<@store> array.

=cut
sub Check_Email {
    if ($_[0] =~ /(@.*@)|(,)|\s+|(\.\.)|(@\.)|(\.@)|(^\.)|(\.$)|(^\d+)|(\d+$)/ || ($_[0] !~ /^.+\@localhost$/ && $_[0] !~ /^.+\@\[?(\w|[-.])+\.[a-zA-Z]{2,3}|[0-9]{1,3}\]?$/)) {
        $email_check++; push @store, $_[0];
    } else {
    }
}

=head2 bad_email_display()

Displays error message when a bad email address is submitted. Prints all the
items in the C<@store> array.

=cut
sub bad_email_display {

    print "Content-type:  text/html\n\n";
    print "<html>\n<head>\n";
    print "<title>RxWeb Reply</title>\n";
    print "</head>\n<body>\n";
    print "<center>\n";
    print "<h1>RxWeb Reply</h1>\n";
    print "<h3>Not a valid email address.</h3>\n";
    print "<table>\n";
    print "<tr><td><cite><font size=+1>\n";

    foreach $store (@store) {
        print "$store<br>\n";
    }

    print "</cite></font></td></tr></table>\n";
    print "<SCRIPT=\"Javascript\">\n";
    print "<form>\n";
    print "<p><input TYPE=\"button\" VALUE=\" Back \" onClick=\"history.go(-1)\"></p>\n";
    print "</form>\n";
    print "</body>\n</html>\n";

}

=head2 recipient()

Determines the group recipient from the functional area selected in the webform
(reads the C<$grp> variable) and sets C<$recipient> accordingly.

=cut
sub recipient {
    if ($grp eq "Circulation") {
        $recipient = "usmaicoicircresill\@umd.edu";
    }
    if ($grp eq "Technical") {
        $recipient = "usmaicoidesktech\@umd.edu";
    }
    if ($grp eq "Web OPAC") {
        $recipient = "usmaicoiuserinter\@umd.edu";
    }
    if ($grp eq "Cataloging") {
        $recipient = "usmaicoicatdbmaint\@umd.edu";
    }
    if ($grp eq "Serials") {
        $recipient = "usmaicoiseracq\@umd.edu";
    }
    if ($grp eq "Acquisitions") {
        $recipient = "usmaicoiseracq\@umd.edu";
    }
    if ($grp eq "Item Maintenance") {
        $recipient = "usmaicoicircresill\@umd.edu,usmaicoicatdbmaint\@umd.edu,usmaicoiseracq\@umd.edu";
    }
    if ($grp eq "Reserves") {
        $recipient = "usmaicoicircresill\@umd.edu,usmaicoiuserinter\@umd.edu";
    }
    if ($grp eq "other") {
        $recipient = "usmaialeph\@umd.edu";
    }
    if ($grp eq "Report request") {
        $recipient = "usmaialeph\@umd.edu";
    }
    if ($grp eq "Change request") {
        $recipient = "usmaialeph\@umd.edu";
    }
    if ($grp eq "ILL") {
        $recipient = "ilug\@umd.edu,usmaicoicircresill\@umd.edu";
    }
}


=head2 slug()

Determines the slug (prefix for email) from the functional area (C<$grp>)
selected in the webform and sets the C<$slug> variable.

=cut
sub slug {
    if ($grp eq "Circulation") {
        $slug = "CIRC:";
    }
    if ($grp eq "Technical") {
        $slug = "TECH:";
    }
    if ($grp eq "Web OPAC") {
        $slug = "OPAC:";
    }
    if ($grp eq "Cataloging") {
        $slug = "CAT:";
    }
    if ($grp eq "Serials") {
        $slug = "SER:";
    }
    if ($grp eq "Acquisitions") {
        $slug = "ACQ:";
    }
    if ($grp eq "Item Maintenance") {
        $slug = "ITM:";
    }
    if ($grp eq "Reserves") {
        $slug = "RES:";
    }
    if ($grp eq "other") {
        $slug = "OTHR:";
    }
    if ($grp eq "Report request") {
        $slug = "RQST:";
    }
    if ($grp eq "Change request") {
        $slug = "CHNG:";
    }
    if ($grp eq "ILL") {
        $slug = "ILL:";
    }
}
